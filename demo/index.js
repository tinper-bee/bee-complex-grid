import React, { Component } from 'react';
import ReactDOM from 'react-dom';
import { Drawer, Clipboard, Collapse, Row, Col } from '@tinper/next-ui';
import Button from '../src';
const { Panel } = Collapse



var Demo1 = require("./demolist/Demo1");var Demo2 = require("./demolist/Demo2");var Demo4 = require("./demolist/Demo4");var Demo5 = require("./demolist/Demo5");var Demo6 = require("./demolist/Demo6");var Demo7 = require("./demolist/Demo7");var Demo8 = require("./demolist/Demo8");var DemoArray = [{"example":<Demo1 />,"title":" 高级表格的基础应用(基本示例1)","code":"/**\r\n * @title 高级表格的基础应用(基本示例1)\r\n * @description 多选、合计、分页、列拖拽、列过滤\r\n *\r\n */\r\nimport React, { Component } from \"react\";\r\nimport  Grid from \"bee-complex-grid\";\r\n\r\nfunction fmoney(s, n) {\r\n  n = n > 0 && n <= 20 ? n : 2;\r\n  s = parseFloat((s + \"\").replace(/[^\\d\\.-]/g, \"\")).toFixed(n) + \"\";\r\n  let l = s.split(\".\")[0].split(\"\").reverse(), r = s.split(\".\")[1];\r\n  let t = \"\";\r\n  for (let i = 0; i < l.length; i++) {\r\n  t += l[i] + ((i + 1) % 3 == 0 && (i + 1) != l.length ? \",\" : \"\");\r\n  }\r\n  return t.split(\"\").reverse().join(\"\") + \".\" + r;\r\n  }\r\n  \r\nconst column = [\r\n  {\r\n    title: \"序号\",\r\n    dataIndex: \"index\",\r\n    key: \"index\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"订单编号\",\r\n    dataIndex: \"orderCode\",\r\n    key: \"orderCode\",\r\n    width: 150\r\n  },\r\n  {\r\n    title: \"金额\",\r\n    dataIndex: \"money\",\r\n    key: \"money\",\r\n    width: 160,\r\n    textAlign:'right',\r\n    sumCol: true,\r\n    render(text, record, index) {\r\n       let money = fmoney(text,2);\r\n       return (<span>{money}</span>)\r\n    }\r\n  },\r\n  {\r\n    title: \"类型\",\r\n    dataIndex: \"type_name\",\r\n    key: \"type_name\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"采购组织\",\r\n    dataIndex: \"purchasing\",\r\n    key: \"purchasing\",\r\n    width: 150\r\n  },\r\n  {\r\n    title: \"采购组\",\r\n    dataIndex: \"purchasingGroup\",\r\n    key: \"purchasingGroup\",\r\n    width: 300\r\n  },\r\n  {\r\n    title: \"凭证日期\",\r\n    dataIndex: \"voucherDate\",\r\n    key: \"voucherDate\",\r\n    width: 150\r\n  },\r\n  {\r\n    title: \"审批状态\",\r\n    dataIndex: \"approvalState_name\",\r\n    key: \"approvalState_name\",\r\n    width: 150\r\n  },\r\n  {\r\n    title: \"确认状态\",\r\n    dataIndex: \"confirmState_name\",\r\n    key: \"confirmState_name\",\r\n    width: 500\r\n  },\r\n  {\r\n    title: \"关闭状态\",\r\n    dataIndex: \"closeState_name\",\r\n    key: \"closeState_name\",\r\n    width: 150\r\n  }\r\n];\r\nconst dataList = [\r\n  {\r\n    index: 1,\r\n    orderCode: \"2343\",\r\n    supplierName: \"xxx\",\r\n    type_name: \"123\",\r\n    purchasing: \"内行\",\r\n    purchasingGroup: \"323\",\r\n    voucherDate: \"kkkk\",\r\n    approvalState_name: \"vvvv\",\r\n    confirmState_name: \"aaaa\",\r\n    closeState_name: \"vnnnnn\",\r\n    money:'1232.56',\r\n    d: \"操作\",\r\n    key: \"1\"\r\n  },\r\n  {\r\n    index: 2,\r\n    _checked: true,\r\n    orderCode: \"222\",\r\n    supplierName: \"22xxx\",\r\n    type_name: \"1223\",\r\n    purchasing: \"内行2\",\r\n    purchasingGroup: \"3223\",\r\n    voucherDate: \"222kk\",\r\n    approvalState_name: \"22vvvv\",\r\n    confirmState_name: \"2aaaa\",\r\n    closeState_name: \"2vnnnnn\",\r\n    money:'2341232.56',\r\n    d: \"2操作\",\r\n    key: \"2\"\r\n  },\r\n  {\r\n    index: 3,\r\n    orderCode: \"222\",\r\n    supplierName: \"22xxx\",\r\n    _disabled: true,\r\n    type_name: \"1223\",\r\n    purchasing: \"内行2\",\r\n    purchasingGroup: \"3223\",\r\n    voucherDate: \"222kk\",\r\n    approvalState_name: \"22vvvv\",\r\n    confirmState_name: \"2aaaa\",\r\n    closeState_name: \"2vnnnnn\",\r\n    money:'122368732.56',\r\n    d: \"3操作\",\r\n    key: \"3\"\r\n  },\r\n  {\r\n    index: 4,\r\n    orderCode: \"222\",\r\n    supplierName: \"22xxx\",\r\n    type_name: \"1223\",\r\n    purchasing: \"内行2\",\r\n    purchasingGroup: \"3223\",\r\n    voucherDate: \"222kk\",\r\n    approvalState_name: \"22vvvv\",\r\n    confirmState_name: \"2aaaa\",\r\n    closeState_name: \"2vnnnnn\",\r\n    money:'18765232.56',\r\n    d: \"4操作\",\r\n    key: \"4\"\r\n  }\r\n];\r\n\r\nclass Demo1 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: dataList\r\n    }\r\n  }\r\n\r\n  getSelectedDataFunc = (selectedList,record,index,newData) => {\r\n    console.log(\"data\", newData);\r\n    this.setState({\r\n      data: newData\r\n    })\r\n  };\r\n\r\n  /**\r\n   * 切换页码的回调\r\n   * @param {Number} pageIndex 跳转指定页数\r\n   */\r\n  freshData = (pageIndex) => {\r\n    console.log('跳转至第 ', pageIndex, ' 页');\r\n  }\r\n\r\n  /**\r\n   * 选择每页多少条的回调函数\r\n   * @param {*} index 跳转指定页数\r\n   * @param {*} value 设置每页显示多少条数据\r\n   */\r\n  onDataNumSelect=(index, value)=>{\r\n    console.log('index：',index, ' value：',value);\r\n  }\r\n  \r\n  render() {\r\n    let paginationObj = {\r\n      items:10,//一页显示多少条\r\n      total:100,//总共多少条、\r\n      freshData:this.freshData,//点击下一页刷新的数据\r\n      onDataNumSelect:this.onDataNumSelect, //每页大小改变触发的事件\r\n      noBorder:true,\r\n      horizontalPosition: 'center'\r\n    }\r\n    return (\r\n      <Grid\r\n        className=\"demo\"\r\n        columns={column}\r\n        data={this.state.data}\r\n        getSelectedDataFunc={this.getSelectedDataFunc}\r\n        paginationObj={paginationObj}\r\n        canSum={true}\r\n        multiSelect={true}\r\n        afterRowLock={(key,isLock,columns)=>{//列锁定回调\r\n          console.log(key,isLock,columns)\r\n        }}\r\n        locale='zh-tw'\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Demo1;","desc":" 多选、合计、分页、列拖拽、列过滤"},{"example":<Demo2 />,"title":" 高级表格(排序)应用","code":"/**\r\n *\r\n * @title 高级表格(排序)应用\r\n * @description 基础grid上添加排序、行过滤功能\r\n *\r\n */\r\nimport React, { Component } from \"react\";\r\nimport Grid from \"bee-complex-grid\";\r\nconst column = [\r\n    {\r\n      title: \"名字\",\r\n      dataIndex: \"a\",\r\n      key: \"a\",\r\n      className:'dfasd',\r\n      width: 200,\r\n      sorter: (pre, after) => {return pre.a.localeCompare(after.a)} ,\r\n      // sorterClick:(data,type)=>{//排序的回调函数\r\n      //   //type value is up or down\r\n      //   console.log(\"data\",data);\r\n      // },\r\n      filterType: \"text\"\r\n    },\r\n    {\r\n      title: \"年龄\",\r\n      dataIndex: \"c\",\r\n      key: \"c\",\r\n      width: 200,\r\n      sumCol: true,\r\n      // sorter: (pre, after) => {return pre.c - after.c},\r\n      // sorterClick:(data,type)=>{//排序的回调函数\r\n      //   //type value is up or down\r\n      //   console.log(\"data\",data);\r\n      // },\r\n      filterType: \"number\"\r\n    },\r\n    {\r\n      title: \"成绩\",\r\n      dataIndex: \"e\",\r\n      key: \"e\",\r\n      width: 200,\r\n      sumCol: true,\r\n      // sorter: (pre, after) => {return pre.e - after.e},\r\n      filterType: \"text\"\r\n    },\r\n    {\r\n      title: \"武功级别\",\r\n      dataIndex: \"d\",\r\n      key: \"d\",\r\n      width: 200,\r\n      filterType: \"text\"\r\n    }\r\n  ];\r\n  const dataList = [\r\n    { a: \"杨过\", b: 675, c: 30, d: \"内行\",e:100, key: \"2\" },\r\n    { a: \"令狐冲\", b: 43, c: 41, d: \"大侠\",e:90, key: \"1\" },\r\n    { a: \"令狐冲1\", b: 43, c: 81, d: \"大侠\", e:120,key: \"4\" },\r\n    { a: \"令狐冲2\", b: 43, c: 81, d: \"大侠\", e:130,key: \"5\" },\r\n    { a: \"郭靖\", b: 153, c: 25, d: \"大侠\",e:90, key: \"3\" }\r\n  ];\r\n\r\nclass Demo2 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      data:dataList\r\n    }\r\n  }\r\n\r\n  getSelectedDataFunc = (selectedList,record,index,newData) => {\r\n    console.log(\"data\", newData);\r\n  };\r\n\r\n  getCloumnsScroll = columns => {\r\n    let sum = 0;\r\n    columns.forEach(da => {\r\n      sum += da.width;\r\n    });\r\n    console.log(\"sum\", sum);\r\n    return sum;\r\n  };\r\n  /**\r\n   * 请求页面数据\r\n   */\r\n  freshData = (pageIndex) => {\r\n    console.log('跳转至第 ', pageIndex, ' 页');\r\n  }\r\n  /**\r\n   * 后端获取数据\r\n   */\r\n  sortFun = (sortParam,columns,newData,oldData)=>{\r\n    this.setState({\r\n      data:newData\r\n    })\r\n  }\r\n  render() {\r\n    let paginationObj = {\r\n      items:10,//总页数\r\n      freshData:this.freshData,\r\n      noBorder:true,\r\n      horizontalPosition: 'center'\r\n    }\r\n    let sortObj = {\r\n        sortFun:this.sortFun\r\n    }\r\n    \r\n    return (\r\n      <div>\r\n         <Grid\r\n          className=\"demo\"\r\n          columns={column}\r\n          data={this.state.data}\r\n          // multiSelect={false}\r\n          getSelectedDataFunc={this.getSelectedDataFunc}\r\n          selectedRow={this.selectedRow}\r\n          sort={sortObj}\r\n          sortFun={this.sortFun}\r\n          paginationObj={paginationObj}\r\n          showFilterMenu\r\n        />\r\n      </div>\r\n     \r\n    );\r\n  }\r\n}\r\nexport default Demo2;","desc":" 基础grid上添加排序、行过滤功能"},{"example":<Demo4 />,"title":" 高级表格的基础应用(基本示例3)","code":"/**\r\n * @title 高级表格的基础应用(基本示例3)\r\n * @description 大数据渲染场景\r\n *\r\n */\r\nimport React, { Component } from \"react\";\r\nimport { Button } from '@tinper/next-ui';\r\nimport Grid from \"bee-complex-grid\";\r\nconst columns = [\r\n    {\r\n        title:'序号',\r\n        dataIndex:'index',\r\n        width:'80',\r\n        render:(text,record,index)=>{\r\n            return index\r\n        },\r\n        fixed:'left'\r\n    },\r\n    {\r\n    title: \"用户名\", dataIndex: \"a\", key: \"a\", width: 580, className: \"rowClassName\",\r\n  },\r\n  { id: \"123\", title: \"性别\", dataIndex: \"b\", key: \"b\", width: 80},\r\n  { title: \"年龄\", dataIndex: \"c\", key: \"c\", width: 200 }\r\n];\r\n\r\nconst data = [ ...new Array(10000) ].map((e, i) => {\r\n    const rs = { a: i + 'a', b: i + 'b', c: i + 'c', d: i + 'd', key: i };\r\n    if(i%3==0){\r\n        rs.b = '女';\r\n    }\r\n    return rs;\r\n   })\r\n\r\nclass Demo4 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  getSelectedDataFunc = (selectedList,record,index,newData) => {\r\n    console.log(\"data\", newData);\r\n  };\r\n\r\n  /**\r\n   * 请求页面数据\r\n   */\r\n  freshata = (pageIndex) => {\r\n    console.log('跳转至第 ', pageIndex, ' 页');\r\n  }\r\n  onDataNumSelect=(index, value)=>{\r\n    console.log('index：',index, ' value：',value);\r\n  }\r\n  onRowHover = (index,record) => {\r\n    this.currentIndex = index;\r\n    this.currentRecord = record;\r\n  }\r\n  handleClick = () => {\r\n    alert('这是第' + this.currentIndex + '列，用户名为:' + this.currentRecord.a);\r\n  }\r\n\r\n  getHoverContent=()=>{\r\n    return <div className=\"opt-btns\"><Button size=\"sm\" onClick={this.handleClick}>一些操作</Button> </div>\r\n  }\r\n  render() {\r\n    let paginationObj = {\r\n      items:10,//一页显示多少条\r\n      total:100,//总共多少条\r\n      freshData:this.freshData,//点击下一页刷新的数据\r\n      onDataNumSelect:this.onDataNumSelect, //每页大小改变触发的事件\r\n      noBorder:true,\r\n      horizontalPosition: 'center'\r\n    }\r\n    return (\r\n      <Grid\r\n        className=\"demo\"\r\n        columns={columns}\r\n        data={data}\r\n        getSelectedDataFunc={this.getSelectedDataFunc}\r\n        paginationObj={paginationObj}\r\n        loadLazy={true}\r\n        heigth={40}\r\n        scroll = {{y:300}}\r\n        hoverContent={this.getHoverContent}\r\n        onRowHover={this.onRowHover}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Demo4;","desc":" 大数据渲染场景"},{"example":<Demo5 />,"title":" 含有ToolBar的复杂表格","code":"/**\r\n * @title 含有ToolBar的复杂表格\r\n * @description 用户可以自定表格的toolBar，其中的button 请参考bee-button中属性配置\r\n *\r\n */\r\nimport React, { Component } from \"react\";\r\nimport Grid from \"bee-complex-grid\";\r\n\r\nconst GridToolBar = Grid.GridToolBar;\r\n\r\n  \r\nconst column = [\r\n  {\r\n    title: \"序号\",\r\n    dataIndex: \"index\",\r\n    key: \"index\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"订单编号\",\r\n    dataIndex: \"orderCode\",\r\n    key: \"orderCode\",\r\n    width: 150\r\n  },\r\n  {\r\n    title: \"类型\",\r\n    dataIndex: \"type_name\",\r\n    key: \"type_name\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"采购组织\",\r\n    dataIndex: \"purchasing\",\r\n    key: \"purchasing\",\r\n    width: 150\r\n  },\r\n  {\r\n    title: \"采购组\",\r\n    dataIndex: \"purchasingGroup\",\r\n    key: \"purchasingGroup\",\r\n    width: 300\r\n  },\r\n  {\r\n    title: \"凭证日期\",\r\n    dataIndex: \"voucherDate\",\r\n    key: \"voucherDate\",\r\n    width: 150\r\n  },\r\n  {\r\n    title: \"审批状态\",\r\n    dataIndex: \"approvalState_name\",\r\n    key: \"approvalState_name\",\r\n    width: 150\r\n  },\r\n  {\r\n    title: \"确认状态\",\r\n    dataIndex: \"confirmState_name\",\r\n    key: \"confirmState_name\",\r\n    width: 500\r\n  },\r\n  {\r\n    title: \"关闭状态\",\r\n    dataIndex: \"closeState_name\",\r\n    key: \"closeState_name\",\r\n    width: 150\r\n  }\r\n];\r\n\r\n\r\nclass Demo5 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        dataList: [\r\n            {\r\n              index: 1,\r\n              orderCode: \"2343\",\r\n              supplierName: \"xxx\",\r\n              type_name: \"123\",\r\n              purchasing: \"内行\",\r\n              purchasingGroup: \"323\",\r\n              voucherDate: \"kkkk\",\r\n              approvalState_name: \"vvvv\",\r\n              confirmState_name: \"aaaa\",\r\n              closeState_name: \"vnnnnn\",\r\n              money:'1232.56',\r\n              key: \"1\"\r\n            },\r\n            {\r\n              index: 2,\r\n              _checked: true,\r\n              orderCode: \"222\",\r\n              supplierName: \"22xxx\",\r\n              type_name: \"1223\",\r\n              purchasing: \"内行2\",\r\n              purchasingGroup: \"3223\",\r\n              voucherDate: \"222kk\",\r\n              approvalState_name: \"22vvvv\",\r\n              confirmState_name: \"2aaaa\",\r\n              closeState_name: \"2vnnnnn\",\r\n              money:'2341232.56',\r\n              key: \"2\"\r\n            },\r\n            {\r\n              index: 3,\r\n              orderCode: \"222\",\r\n              supplierName: \"22xxx\",\r\n              _disabled: true,\r\n              type_name: \"1223\",\r\n              purchasing: \"内行2\",\r\n              purchasingGroup: \"3223\",\r\n              voucherDate: \"222kk\",\r\n              approvalState_name: \"22vvvv\",\r\n              confirmState_name: \"2aaaa\",\r\n              closeState_name: \"2vnnnnn\",\r\n              money:'122368732.56',\r\n              key: \"3\"\r\n            },\r\n            {\r\n              index: 4,\r\n              orderCode: \"222\",\r\n              supplierName: \"22xxx\",\r\n              type_name: \"1223\",\r\n              purchasing: \"内行2\",\r\n              purchasingGroup: \"3223\",\r\n              voucherDate: \"222kk\",\r\n              approvalState_name: \"22vvvv\",\r\n              confirmState_name: \"2aaaa\",\r\n              closeState_name: \"2vnnnnn\",\r\n              money:'18765232.56',\r\n              key: \"4\"\r\n            }\r\n          ]\r\n    }\r\n  }\r\n\r\n  getSelectedDataFunc = (selectedList,record,index,newData) => {\r\n    console.log(\"data\", newData);\r\n  };\r\n\r\n  /**\r\n   * 请求页面数据\r\n   */\r\n  freshData = (pageIndex) => {\r\n    console.log('跳转至第 ', pageIndex, ' 页');\r\n  }\r\n  onDataNumSelect=(index, value)=>{\r\n    console.log('index：',index, ' value：',value);\r\n  }\r\n  addData = ()=>{\r\n      const dataList = this.state.dataList;\r\n      const currentIndex  = dataList.length + 1;\r\n      dataList.push({\r\n        index: currentIndex,\r\n        key: `${currentIndex}`\r\n      });\r\n      this.setState({\r\n          dataList\r\n      })\r\n     \r\n  }\r\n  export = ()=>{\r\n      console.log('export=======');\r\n  }\r\n  /**\r\n   *批量修改操作\r\n   */\r\n  dispatchUpdate = ()=>{\r\n    console.log('--dispatch---update')\r\n  }\r\n  /**\r\n   *批量删除\r\n   */\r\n  dispatchDel = ()=>{\r\n    console.log('--dispatch---del')\r\n  }\r\n  render() {\r\n    let paginationObj = {\r\n      items:10,//一页显示多少条\r\n      total:100,//总共多少条、\r\n      freshData:this.freshData,//点击下一页刷新的数据\r\n      onDataNumSelect:this.onDataNumSelect, //每页大小改变触发的事件\r\n      showJump:false,\r\n      noBorder:true,\r\n      horizontalPosition: 'center'\r\n    }\r\n\r\n    const toolBtns = [{\r\n            value:'新增',\r\n            onClick:this.addData,\r\n            bordered:false,\r\n            colors:'primary'\r\n        },{\r\n            value:'导出',\r\n            iconType:'uf-search',\r\n            onClick:this.export\r\n        },{\r\n            value:'上传',\r\n            iconType:'uf-cloud-up',\r\n        },{\r\n            value:'批量操作',\r\n            onClick:this.dispatchOpt,\r\n            children:[\r\n                {\r\n                    value:'修改',  \r\n                    onClick:this.dispatchUpdate\r\n                },{\r\n                    value:'删除',  \r\n                    onClick:this.dispatchDel\r\n                }\r\n            ]\r\n        },{\r\n            iconType:'uf-copy',\r\n        }]\r\n    return (\r\n      <div>\r\n        <GridToolBar toolBtns={toolBtns} btnSize='sm' />\r\n        <Grid\r\n          className=\"demo\"\r\n          columns={column}\r\n          data={this.state.dataList}\r\n          getSelectedDataFunc={this.getSelectedDataFunc}\r\n          paginationObj={paginationObj}\r\n        />\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\nexport default Demo5;","desc":" 用户可以自定表格的toolBar，其中的button 请参考bee-button中属性配置"},{"example":<Demo6 />,"title":" 高级表格(保存操作模板、导出excel)","code":"/**\r\n  * @title 高级表格(保存操作模板、导出excel)\r\n * @description 拖住表格宽度、交换列、以及导出excel功能\r\n *\r\n */\r\nimport React, { Component } from \"react\";\r\nimport { Button } from '@tinper/next-ui';\r\nimport Grid from \"bee-complex-grid\";\r\n\r\nconst GridToolBar = Grid.GridToolBar;\r\n\r\nconst column = [\r\n  {\r\n    title: \"序号\",\r\n    dataIndex: \"index\",\r\n    key: \"index\",\r\n    width: 400,\r\n    // exportHidden:true //是否在导出中隐藏此列,此属性如不设置的话，他会读取当前页面的列是否隐藏和显示\r\n  },\r\n  {\r\n    title: \"订单编号\",\r\n    dataIndex: \"orderCode\",\r\n    key: \"orderCode\",\r\n    exportKey:'supplierName',//单独设置当前列的导出的key\r\n    width: '20%'\r\n  },\r\n  {\r\n    title: \"供应商名称\",\r\n    dataIndex: \"supplierName\",\r\n    key: \"supplierName\",\r\n    width: 130\r\n  },\r\n  {\r\n    title: \"类型\",\r\n    dataIndex: \"type_name\",\r\n    key: \"type_name\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"采购组织\",\r\n    dataIndex: \"purchasing\",\r\n    key: \"purchasing\",\r\n    width: 130,\r\n  },\r\n  {\r\n    title: \"采购组\",\r\n    dataIndex: \"purchasingGroup\",\r\n    key: \"purchasingGroup\",\r\n    width: 300\r\n  },\r\n  {\r\n    title: \"凭证日期\",\r\n    dataIndex: \"voucherDate\",\r\n    key: \"voucherDate\",\r\n    width: 130\r\n  },\r\n  {\r\n    title: \"审批状态\",\r\n    dataIndex: \"approvalState_name\",\r\n    key: \"approvalState_name\",\r\n    width: 130\r\n  },\r\n  {\r\n    title: \"确认状态\",\r\n    dataIndex: \"confirmState_name\",\r\n    key: \"confirmState_name\",\r\n    width: 500\r\n  },\r\n  {\r\n    title: \"关闭状态\",\r\n    dataIndex: \"closeState_name\",\r\n    key: \"closeState_name\",\r\n    width: 100\r\n  }\r\n];\r\nconst dataList = [\r\n  {\r\n    index: 1,\r\n    orderCode: \"2343\",\r\n    supplierName: \"xxx\",\r\n    type_name: \"123\",\r\n    purchasing: \"内行\",\r\n    purchasingGroup: \"323\",\r\n    voucherDate: \"kkkk\",\r\n    approvalState_name: \"vvvv\",\r\n    confirmState_name: \"aaaa\",\r\n    closeState_name: \"vnnnnn\",\r\n    d: \"操作\",\r\n    key: \"1\"\r\n  },\r\n  {\r\n    index: 2,\r\n    _checked: true,\r\n    orderCode: \"222\",\r\n    supplierName: \"22xxx\",\r\n    type_name: \"1223\",\r\n    purchasing: \"内行2\",\r\n    purchasingGroup: \"3223\",\r\n    voucherDate: \"222kk\",\r\n    approvalState_name: \"22vvvv\",\r\n    confirmState_name: \"2aaaa\",\r\n    closeState_name: \"2vnnnnn\",\r\n    d: \"2操作\",\r\n    key: \"2\"\r\n  },\r\n  {\r\n    index: 3,\r\n    orderCode: \"222\",\r\n    supplierName: \"22xxx\",\r\n    _disabled: true,\r\n    type_name: \"1223\",\r\n    purchasing: \"内行2\",\r\n    purchasingGroup: \"3223\",\r\n    voucherDate: \"222kk\",\r\n    approvalState_name: \"22vvvv\",\r\n    confirmState_name: \"2aaaa\",\r\n    closeState_name: \"2vnnnnn\",\r\n    d: \"3操作\",\r\n    key: \"3\"\r\n  },\r\n  {\r\n    index: 4,\r\n    orderCode: \"222\",\r\n    supplierName: \"22xxx\",\r\n    type_name: \"1223\",\r\n    purchasing: \"内行2\",\r\n    purchasingGroup: \"3223\",\r\n    voucherDate: \"222kk\",\r\n    approvalState_name: \"22vvvv\",\r\n    confirmState_name: \"2aaaa\",\r\n    closeState_name: \"2vnnnnn\",\r\n    d: \"4操作\",\r\n    key: \"4\"\r\n  }\r\n];\r\n\r\nconst exportDataList = [\r\n  {\r\n    index: 1,\r\n    orderCode: \"2343\",\r\n    supplierName: \"xxx\",\r\n    type_name: \"123\",\r\n    purchasing: \"内行\",\r\n    purchasingGroup: \"323\",\r\n    voucherDate: \"kkkk\",\r\n    approvalState_name: \"vvvv\",\r\n    confirmState_name: \"aaaa\",\r\n    closeState_name: \"vnnnnn\",\r\n    d: \"操作\",\r\n    key: \"1\"\r\n  },\r\n  {\r\n    index: 4,\r\n    orderCode: \"222\",\r\n    supplierName: \"22xxx\",\r\n    type_name: \"1223\",\r\n    purchasing: \"内行2\",\r\n    purchasingGroup: \"3223\",\r\n    voucherDate: \"222kk\",\r\n    approvalState_name: \"22vvvv\",\r\n    confirmState_name: \"2aaaa\",\r\n    closeState_name: \"2vnnnnn\",\r\n    d: \"4操作\",\r\n    key: \"4\"\r\n  }\r\n];\r\n\r\n\r\nclass Demo3 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      showTemTable:false\r\n    }\r\n  }\r\n  \r\n  getSelectedDataFunc = (selectedList,record,index,newData) => {\r\n    console.log(\"data\", newData);\r\n  };\r\n\r\n  getCloumnsScroll = columns => {\r\n    let sum = 0;\r\n    columns.forEach(da => {\r\n      sum += da.width;\r\n    });\r\n    console.log(\"sum\", sum);\r\n    return sum;\r\n  };\r\n\r\n  /**\r\n   * 请求页面数据\r\n   */\r\n  freshData = (pageIndex) => {\r\n    console.log('跳转至第 ', pageIndex, ' 页');\r\n  }\r\n  createTemTable=()=>{\r\n    const colsAndTablePros = this.refs.grid.getColumnsAndTablePros();\r\n    this.setState({\r\n      showTemTable:true,\r\n      tablePros:colsAndTablePros.tablePros,\r\n      temColumns:colsAndTablePros.columns\r\n    });\r\n  }\r\n\r\n  exportExcel = ()=>{\r\n    this.refs.grid.exportExcel();\r\n  }\r\n\r\n  onRowHover = (index,record) => {\r\n    this.currentIndex = index;\r\n    this.currentRecord = record;\r\n  }\r\n\r\n  handleClick = () => {\r\n    alert('这是第' + this.currentIndex + '列，订单编号为:' + this.currentRecord.orderCode);\r\n  }\r\n\r\n  getHoverContent=()=>{\r\n    return <div className=\"opt-btns\"><Button size=\"sm\" onClick={this.handleClick}>一些操作</Button> </div>\r\n  }\r\n\r\n  render() {\r\n    let paginationObj = {\r\n      items:10,//总页数\r\n      total:100,\r\n      freshData:this.freshData,\r\n      noBorder:true,\r\n      horizontalPosition: 'center'\r\n    }\r\n    const toolBtns = [{\r\n        value:'生成模板表格',\r\n        onClick:this.createTemTable,\r\n        bordered:false,\r\n        colors:'primary'\r\n    },{\r\n        value:'导出',\r\n        iconType:'uf-export',\r\n        onClick:this.exportExcel\r\n    }]\r\n    return (\r\n      <div>\r\n        <GridToolBar toolBtns={toolBtns}  />\r\n        <Grid\r\n          ref=\"grid\"\r\n          className='gridDemo demo'\r\n          exportFileName=\"bee-grid-excel\" //导出excel的文件名称设置，如果不设置为dowloand\r\n          columns={column}\r\n          data={dataList}\r\n          exportData={exportDataList}\r\n          getSelectedDataFunc={this.getSelectedDataFunc}\r\n          dragborder\r\n          multiSelect={{ type: \"checkbox\" }}\r\n          scroll={{ x: \"130%\" }}\r\n          selectedRow={this.selectedRow}\r\n          paginationObj={paginationObj}\r\n          hoverContent={this.getHoverContent}\r\n          onRowHover={this.onRowHover}\r\n        />\r\n        <h3>根据模板生成的表格</h3>\r\n        {this.state.showTemTable?\r\n          <Grid {...this.state.tablePros} columns={this.state.temColumns}/>\r\n          :\"\"}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Demo3;","desc":" 拖住表格宽度、交换列、以及导出excel功能"},{"example":<Demo7 />,"title":" 高级表格(单选)应用","code":"/**\r\n * @title 高级表格(单选)应用\r\n * @description 设置 multiSelect = {{ type:\"radio\" }} 即可使用 Grid 表格单选功能。\r\n *\r\n */\r\nimport React, { Component } from \"react\";\r\nimport Grid from \"bee-complex-grid\";\r\n\r\nfunction fmoney(s, n) {\r\n  n = n > 0 && n <= 20 ? n : 2;\r\n  s = parseFloat((s + \"\").replace(/[^\\d\\.-]/g, \"\")).toFixed(n) + \"\";\r\n  let l = s.split(\".\")[0].split(\"\").reverse(), r = s.split(\".\")[1];\r\n  let t = \"\";\r\n  for (let i = 0; i < l.length; i++) {\r\n  t += l[i] + ((i + 1) % 3 == 0 && (i + 1) != l.length ? \",\" : \"\");\r\n  }\r\n  return t.split(\"\").reverse().join(\"\") + \".\" + r;\r\n  }\r\n  \r\nconst column = [\r\n  {\r\n    title: \"序号\",\r\n    dataIndex: \"index\",\r\n    key: \"index\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"订单编号\",\r\n    dataIndex: \"orderCode\",\r\n    key: \"orderCode\",\r\n    width: 150\r\n  },\r\n  {\r\n    title: \"金额\",\r\n    dataIndex: \"money\",\r\n    key: \"money\",\r\n    width: 160,\r\n    textAlign:'right',\r\n    sumCol: true,\r\n    render(text, record, index) {\r\n       let money = fmoney(text,2);\r\n       return (<span>{money}</span>)\r\n    }\r\n  },\r\n  {\r\n    title: \"类型\",\r\n    dataIndex: \"type_name\",\r\n    key: \"type_name\",\r\n    width: 100\r\n  },\r\n  {\r\n    title: \"采购组织\",\r\n    dataIndex: \"purchasing\",\r\n    key: \"purchasing\",\r\n    width: 150\r\n  },\r\n  {\r\n    title: \"采购组\",\r\n    dataIndex: \"purchasingGroup\",\r\n    key: \"purchasingGroup\",\r\n    width: 300\r\n  },\r\n  {\r\n    title: \"凭证日期\",\r\n    dataIndex: \"voucherDate\",\r\n    key: \"voucherDate\",\r\n    width: 150\r\n  },\r\n  {\r\n    title: \"审批状态\",\r\n    dataIndex: \"approvalState_name\",\r\n    key: \"approvalState_name\",\r\n    width: 150\r\n  },\r\n  {\r\n    title: \"确认状态\",\r\n    dataIndex: \"confirmState_name\",\r\n    key: \"confirmState_name\",\r\n    width: 500\r\n  },\r\n  {\r\n    title: \"关闭状态\",\r\n    dataIndex: \"closeState_name\",\r\n    key: \"closeState_name\",\r\n    width: 150\r\n  }\r\n];\r\nconst dataList = [\r\n  {\r\n    index: 0,\r\n    orderCode: \"2343\",\r\n    supplierName: \"xxx\",\r\n    type_name: \"123\",\r\n    purchasing: \"内行\",\r\n    purchasingGroup: \"323\",\r\n    voucherDate: \"kkkk\",\r\n    approvalState_name: \"vvvv\",\r\n    confirmState_name: \"aaaa\",\r\n    closeState_name: \"vnnnnn\",\r\n    money:'1232.56',\r\n    d: \"操作\",\r\n    key: \"1\"\r\n  },\r\n  {\r\n    index: 1,\r\n    orderCode: \"222\",\r\n    supplierName: \"22xxx\",\r\n    type_name: \"1223\",\r\n    purchasing: \"内行2\",\r\n    purchasingGroup: \"3223\",\r\n    voucherDate: \"222kk\",\r\n    approvalState_name: \"22vvvv\",\r\n    confirmState_name: \"2aaaa\",\r\n    closeState_name: \"2vnnnnn\",\r\n    money:'2341232.56',\r\n    d: \"2操作\",\r\n    key: \"2\"\r\n  },\r\n  {\r\n    index: 2,\r\n    orderCode: \"222\",\r\n    supplierName: \"22xxx\",\r\n    type_name: \"1223\",\r\n    purchasing: \"内行2\",\r\n    purchasingGroup: \"3223\",\r\n    voucherDate: \"222kk\",\r\n    approvalState_name: \"22vvvv\",\r\n    confirmState_name: \"2aaaa\",\r\n    closeState_name: \"2vnnnnn\",\r\n    money:'122368732.56',\r\n    d: \"3操作\",\r\n    key: \"3\"\r\n  },\r\n  {\r\n    index: 3,\r\n    orderCode: \"222\",\r\n    supplierName: \"22xxx\",\r\n    type_name: \"1223\",\r\n    purchasing: \"内行2\",\r\n    purchasingGroup: \"3223\",\r\n    voucherDate: \"222kk\",\r\n    approvalState_name: \"22vvvv\",\r\n    confirmState_name: \"2aaaa\",\r\n    closeState_name: \"2vnnnnn\",\r\n    money:'18765232.56',\r\n    d: \"4操作\",\r\n    key: \"4\"\r\n  }\r\n];\r\n\r\nclass Demo7 extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  getSelectedDataFunc = (record,index) => {\r\n    console.log(\"record\", record, \"index\",index);\r\n  };\r\n  /**\r\n   * 切换页码的回调\r\n   * @param {Number} pageIndex 跳转指定页数\r\n   */\r\n  freshData = (pageIndex) => {\r\n    console.log('跳转至第 ', pageIndex, ' 页');\r\n  }\r\n\r\n  /**\r\n   * 选择每页多少条的回调函数\r\n   * @param {*} index 跳转指定页数\r\n   * @param {*} value 设置每页显示多少条数据\r\n   */\r\n  onDataNumSelect=(index, value)=>{\r\n    console.log('index：',index, ' value：',value);\r\n  }\r\n  render() {\r\n    let paginationObj = {\r\n      items:10,//一页显示多少条\r\n      total:100,//总共多少条、\r\n      freshData:this.freshData,//点击下一页刷新的数据\r\n      onDataNumSelect:this.onDataNumSelect, //每页大小改变触发的事件\r\n      showJump:false,\r\n      noBorder:true,\r\n      horizontalPosition: 'center'\r\n    }\r\n    return (\r\n      <Grid\r\n        className=\"demo\"\r\n        columns={column}\r\n        data={dataList}\r\n        paginationObj={paginationObj}\r\n        canSum={true} \r\n        multiSelect={{ type:\"radio\" }}\r\n        getSelectedDataFunc={this.getSelectedDataFunc}\r\n      />\r\n    );\r\n  }\r\n}\r\nexport default Demo7;","desc":" 设置 multiSelect = {{ type:\"radio\" }} 即可使用 Grid 表格单选功能。"},{"example":<Demo8 />,"title":" EditGrid 编辑表格","code":"/**\r\n * @title EditGrid 编辑表格\r\n * @description disabled 参数控制是否可编辑，onChange 方法是表格数据更改后的回调函数，onValidate 方法用于提交前的数据校验。\r\n *\r\n */\r\nimport React, { Component } from \"react\";\nimport { Button } from 'tinper-bee';\r\nimport Grid from 'bee-complex-grid';\r\n// \nimport { Button } from '@tinper/next-ui';\r\n\r\nconst EditGrid = Grid.EditGrid;\r\n\r\nconst column = [\r\n    {\r\n        title: \"订单编号\",\r\n        dataIndex: \"orderCode\",\r\n        key: \"orderCode\",\r\n        width: 150,\r\n        renderType: 'input',\r\n        required: true,\r\n        validate: true,\r\n        pattern: /^2$/,\r\n        patternMessage: '格式错误',\r\n        filedProps: {\r\n            maxLength: '9'\r\n        }\r\n    },\r\n    {\r\n        title: \"金额\",\r\n        dataIndex: \"money\",\r\n        key: \"money\",\r\n        width: 160,\r\n        textAlign: 'right',\r\n        renderType: 'inputNumber',\r\n        required: true,\r\n        validate: true,\r\n        filedProps: {\r\n            precision: 0\r\n        }\r\n    },\r\n    {\r\n        title: \"类型\",\r\n        dataIndex: \"type_name\",\r\n        key: \"type_name\",\r\n        width: 100,\r\n        renderType: 'select',\r\n        required: true,\r\n        validate: true,\r\n        filedProps: {\r\n            options: [\r\n                {\r\n                    key: '类型1', value: '1'\r\n                },\r\n                {\r\n                    key: '类型2', value: '2'\r\n                },\r\n                {\r\n                    key: '类型3', value: '3'\r\n                },\r\n            ]\r\n        }\r\n    },\r\n    {\r\n        title: \"采购组织\",\r\n        dataIndex: \"purchasing\",\r\n        key: \"purchasing\",\r\n        width: 150\r\n    },\r\n    {\r\n        title: \"采购组\",\r\n        dataIndex: \"purchasingGroup\",\r\n        key: \"purchasingGroup\",\r\n        width: 300\r\n    },\r\n    {\r\n        title: \"凭证日期\",\r\n        dataIndex: \"voucherDate\",\r\n        key: \"voucherDate\",\r\n        width: 150\r\n    },\r\n    {\r\n        title: \"审批状态\",\r\n        dataIndex: \"approvalState_name\",\r\n        key: \"approvalState_name\",\r\n        width: 150\r\n    },\r\n    {\r\n        title: \"确认状态\",\r\n        dataIndex: \"confirmState_name\",\r\n        key: \"confirmState_name\",\r\n        width: 500\r\n    },\r\n    {\r\n        title: \"关闭状态\",\r\n        dataIndex: \"closeState_name\",\r\n        key: \"closeState_name\",\r\n        width: 150\r\n    }\r\n];\r\nconst dataList = [\r\n    {\r\n        orderCode: \"11\",\r\n        supplierName: \"xxx\",\r\n        type_name: \"1\",\r\n        purchasing: \"内行\",\r\n        purchasingGroup: \"323\",\r\n        voucherDate: \"kkkk\",\r\n        approvalState_name: \"vvvv\",\r\n        confirmState_name: \"aaaa\",\r\n        closeState_name: \"vnnnnn\",\r\n        money: '1232.56',\r\n        d: \"操作\",\r\n        key: \"1\"\r\n    },\r\n    {\r\n        orderCode: \"22\",\r\n        supplierName: \"22xxx\",\r\n        type_name: \"2\",\r\n        purchasing: \"内行2\",\r\n        purchasingGroup: \"3223\",\r\n        voucherDate: \"222kk\",\r\n        approvalState_name: \"22vvvv\",\r\n        confirmState_name: \"2aaaa\",\r\n        closeState_name: \"2vnnnnn\",\r\n        money: '2341232.56',\r\n        d: \"2操作\",\r\n        key: \"2\"\r\n    },\r\n    {\r\n        orderCode: \"33\",\r\n        supplierName: \"22xxx\",\r\n        type_name: \"3\",\r\n        purchasing: \"内行2\",\r\n        purchasingGroup: \"3223\",\r\n        voucherDate: \"222kk\",\r\n        approvalState_name: \"22vvvv\",\r\n        confirmState_name: \"2aaaa\",\r\n        closeState_name: \"2vnnnnn\",\r\n        money: '122368732.56',\r\n        d: \"3操作\",\r\n        key: \"3\"\r\n    },\r\n    {\r\n        orderCode: \"44\",\r\n        supplierName: \"22xxx\",\r\n        type_name: \"3\",\r\n        purchasing: \"内行2\",\r\n        purchasingGroup: \"3223\",\r\n        voucherDate: \"222kk\",\r\n        approvalState_name: \"22vvvv\",\r\n        confirmState_name: \"2aaaa\",\r\n        closeState_name: \"2vnnnnn\",\r\n        money: '18765232.56',\r\n        d: \"4操作\",\r\n        key: \"4\"\r\n    }\r\n];\r\n\r\nclass Demo8 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            disabled: false\r\n        }\r\n    }\r\n\r\n    onChange = (data) => {\r\n        console.log('table的数据如下')\r\n        console.log(data)\r\n    }\r\n    onDel = (data) => {\r\n        console.log('删除的数据如下')\r\n        console.log(data)\r\n    }\r\n    click = () => {\r\n        this.setState({\r\n            disabled: !this.state.disabled\r\n        })\r\n    }\r\n\r\n    freshData = (pageIndex) => {\r\n        console.log('跳转至第 ', pageIndex, ' 页');\r\n    }\r\n\r\n    onDataNumSelect = (index, value) => {\r\n        console.log('index：', index, ' value：', value);\r\n    }\r\n    // {\r\n    //   0:{\r\n    //     key1:'errorMessage1',\r\n    //     key2:'errorMessage',\r\n    //   },\r\n    //   1:{\r\n    //     key1:'errorMessage'\r\n    //   },\r\n    // }\r\n    onValidate=()=>{\r\n        let errors = this.editGrid.validate();\r\n\r\n        if(errors){\r\n        console.log('有错误，错误信息如下');\r\n        let errorMessage = '';\r\n        Object.keys(errors).forEach(item=>{\r\n            let current = errors[item];\r\n            Object.keys(current).forEach(it=>{\r\n            errorMessage+=`第${Number(item)+1}行的${it}校验失败，错误原因是：${current[it]};`\r\n            })\r\n        })\r\n        console.log(errorMessage)\r\n        }else{\r\n        console.log('没有错误')\r\n        }\r\n    }\r\n\r\n    render () {\r\n        let paginationObj = {\r\n            items: 10,\r\n            total: 20,//总共多少条\r\n            freshData: this.freshData,//点击下一页刷新的数据\r\n            onDataNumSelect: this.onDataNumSelect, //每页大小改变触发的事件\r\n            showJump: true,\r\n            horizontalPosition: 'center'\r\n        }\r\n        return (\r\n            <div className='edit-grid-demo'>\r\n                <Button onClick={this.click} style={{ 'marginBottom': '20px' }} colors='primary'>\r\n                    {this.state.disabled ? '设置可编辑' : '设置不可编辑'}\r\n                </Button>\r\n                <Button onClick={this.onValidate} style={{'marginBottom':'20px','marginLeft':'20px'}} colors='primary'>点我校验</Button>\r\n                <EditGrid\r\n                    columns={column}\r\n                    data={dataList}\r\n                    paginationObj={paginationObj}\r\n                    multiSelect={true}\r\n                    onChange={this.onChange}\r\n                    disabled={this.state.disabled}\r\n                    ref ={editGrid => this.editGrid = editGrid } \r\n                />\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Demo8;","desc":" disabled 参数控制是否可编辑，onChange 方法是表格数据更改后的回调函数，onValidate 方法用于提交前的数据校验。"}]


class Demo extends Component {
    constructor(props){
        super(props);
        this.state = {
            open: false
        }
    }
    handleClick=()=> {
        this.setState({ open: !this.state.open })
    }
    fCloseDrawer=()=>{
        this.setState({
            open: false
        })
    }

    render () {
        const { title, example, code, desc, scss_code  } = this.props;

        const header = (
            <div>
                <p className='component-title'>{ title }</p>
                <p>{ desc }</p>
                <span className='component-code' onClick={this.handleClick}> 查看源码 <i className='uf uf-arrow-right'/> </span>
            </div>
        );
        return (
            <Col md={24} id={title.trim()} className='component-demo'>
            <Panel header={header}>
                {example}
            </Panel>
           
            <Drawer style={{position: 'fixed'}} className='component-drawerc' title={title} show={this.state.open} placement='right' onClose={this.fCloseDrawer}>
            <div className='component-code-copy'> JS代码 
                <Clipboard action="copy" text={code}/>
            </div>
            <pre className="pre-js">
                <code className="hljs javascript">{ code }</code>
            </pre >
            {!!scss_code ?<div className='component-code-copy copy-css'> SCSS代码 
                <Clipboard action="copy" text={scss_code}/>
            </div>:null }
                { !!scss_code ? <pre className="pre-css">
                 <code className="hljs css">{ scss_code }</code>
                 </pre> : null }
            </Drawer>
        </Col>
    )
    }
}

class DemoGroup extends Component {
    constructor(props){
        super(props)
    }
    render () {
        return (
            <Row>
            {DemoArray.map((child,index) => {

                return (
            <Demo example= {child.example} title= {child.title} code= {child.code} scss_code= {child.scss_code} desc= {child.desc} key= {index}/>
    )

    })}
    </Row>
    )
    }
}

ReactDOM.render(<DemoGroup/>, document.getElementById('tinperBeeDemo'));
